---
- name: Kubernetes Cluster Setup with Calico and Containerd
  hosts: all
  become: yes
  vars:
    kube_version: "1.27.0"
    calico_version: "v3.26"
    containerd_version: "2.0.5"
    containerd_url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    containerd_version_check: "2.0.5"


  tasks:
    # 1. Install Required Packages
    # - name: Install Required Packages
    #   apt:
    #     name:
    #       - apt-transport-https
    #       - ca-certificates
    #       - curl
    #       - gnupg
    #       - lsb-release
    #     state: present
    #     update_cache: yes

    # 2. Disable Swap
    - name: Disable Swap
      ansible.builtin.shell: "swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab"

    # 3. Update /etc/hosts
    - name: Add multiple hosts to /etc/hosts
      ansible.builtin.blockinfile:
        path: /etc/hosts
        marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        block: |
          192.168.122.50 k8s-master
          192.168.122.51 k8s-worker1
          192.168.122.52 k8s-worker2
        state: present
        backup: yes

    # # 4. Setup containerd modules
    # - name: Ensure containerd.conf file exists
    #   ansible.builtin.file:
    #     path: /etc/modules-load.d/containerd.conf
    #     state: touch
    #     mode: '0644'

    # - name: Add modules to containerd.conf
    #   ansible.builtin.lineinfile:
    #     path: /etc/modules-load.d/containerd.conf
    #     line: "{{ item }}"
    #     state: present
    #   loop:
    #     - "overlay"
    #     - "br_netfilter"

    # # 5. Setup sysctl for Kubernetes
    # - name: Ensure 99-kubernetes-cri.conf file exists
    #   ansible.builtin.file:
    #     path: /etc/sysctl.d/99-kubernetes-cri.conf
    #     state: touch
    #     mode: '0644'

    # - name: Add sysctl settings for Kubernetes
    #   ansible.builtin.lineinfile:
    #     path: /etc/sysctl.d/99-kubernetes-cri.conf
    #     line: "{{ item }}"
    #     state: present
    #   loop:
    #     - "net.bridge.bridge-nf-call-iptables = 1"
    #     - "net.ipv4.ip_forward = 1"
    #     - "net.bridge.bridge-nf-call-ip6tables = 1"

    # - name: Apply sysctl settings
    #   ansible.builtin.shell: sysctl --system

    # # 6. Install Containerd
    
    # - name: Download Containerd archive
    #   ansible.builtin.get_url:
    #     url: "{{ containerd_url }}"
    #     dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    #     mode: '0644'

    # - name: Extract Containerd archive
    #   ansible.builtin.unarchive:
    #     src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    #     dest: "/tmp/"
    #     remote_src: yes
    # - name: Extract Containerd archive
    #   ansible.builtin.command:
    #     cmd: tar Cxzvf /usr/local /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
    #   become: yes
    # - name: Get Containerd version
    #   ansible.builtin.command:
    #     cmd: containerd --version
    #   register: containerd_version_output


    # - name: Print Containerd version
    #   debug:
    #     msg: "Containerd installed: {{ containerd_version_output.stdout }}"
    # # 6. Install containerd.service
    # - name: Download containerd systemd service file
    #   ansible.builtin.get_url:
    #     url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    #     dest: /etc/systemd/system/containerd.service
    #     mode: '0644'

    # - name: Reload systemd manager configuration
    #   ansible.builtin.shell: systemctl daemon-reload

    # - name: Enable and start containerd service
    #   ansible.builtin.systemd:
    #     name: containerd
    #     enabled: true
    #     state: started
    # # 6. Install runc
    
    # - name: Ensure the directory exists
    #   ansible.builtin.file:
    #     path: /tmp/
    #     state: directory
    #     mode: '0755'

    # - name: Download runc file
    #   ansible.builtin.get_url:
    #     url: https://github.com/opencontainers/runc/releases/download/v1.3.0/runc.amd64
    #     dest: /tmp/runc.amd64
    #     mode: '0644'

    # - name: Install runc binary
    #   ansible.builtin.copy:
    #     src: /tmp/runc.amd64
    #     dest: /usr/local/sbin/runc
    #     mode: '0755'
    # - name: Download CNI plugins
    #   ansible.builtin.get_url:
    #     url: https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz
    #     dest: /tmp/cni-plugins-linux-amd64-v1.7.1.tgz
    #     mode: '0644'

    # - name: Create CNI bin directory
    #   ansible.builtin.file:
    #     path: /opt/cni/bin
    #     state: directory
    #     mode: '0755'

    # - name: Extract CNI plugins
    #   ansible.builtin.unarchive:
    #     src: /tmp/cni-plugins-linux-amd64-v1.7.1.tgz
    #     dest: /opt/cni/bin
    #     remote_src: yes
    # - name: Ensure containerd config directory exists
    #   ansible.builtin.file:
    #     path: /etc/containerd
    #     state: directory
    #     mode: '0755'

    # - name: Generate containerd default configuration
    #   ansible.builtin.shell: |
    #     containerd config default | tee /etc/containerd/config.toml
    #   args:
    #     creates: /etc/containerd/config.toml
    # - name: Enable SystemdCgroup in containerd config
    #   ansible.builtin.blockinfile:
    #     path: /etc/containerd/config.toml
    #     marker: "# {mark} ANSIBLE MANAGED BLOCK"
    #     block: |
    #       [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
    #         SystemdCgroup = true
    #     insertafter: '^\[plugins\."io\.containerd\.grpc\.v1\.cri"\]$'
    #     state: present