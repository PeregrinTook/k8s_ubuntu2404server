---
- name: 02 Configure containerd runtime
  hosts: all
  become: true
  vars_files:
    - vars.yml

  tasks:
    # ============ Kernel Modules Setup ============
    - name: Ensure containerd.conf exists with correct content
      ansible.builtin.copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'
      register: containerd_conf
      changed_when: containerd_conf.changed

    - name: Ensure containerd kernel modules are configured
      ansible.builtin.copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'
      register: modules_config
      changed_when: modules_config.changed

    # ============ Kernel Networking Parameters ============
    - name: Configure Kubernetes CRI sysctl settings
      ansible.builtin.blockinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        marker: "# {mark} ANSIBLE MANAGED - KUBERNETES CRI"
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        create: true
        mode: '0644'
      register: sysctl_config
      changed_when: sysctl_config.changed

    - name: Apply sysctl settings
      ansible.builtin.command: sysctl --system
      when: sysctl_config.changed
      register: sysctl_apply
      changed_when: "'applying' in sysctl_apply.stdout"

    - name: Verify sysctl settings
      ansible.builtin.shell: |
        sysctl -n {{ item.key }} 2>/dev/null || echo "unavailable"
      loop:
        - {key: 'net.bridge.bridge-nf-call-iptables', expected: '1'}
        - {key: 'net.ipv4.ip_forward', expected: '1'}
        - {key: 'net.bridge.bridge-nf-call-ip6tables', expected: '1'}
      register: sysctl_verify
      changed_when: >
        (sysctl_verify.stdout != item.expected) and
        (sysctl_verify.stdout != 'unavailable')
      failed_when: >
        (sysctl_verify.stdout != item.expected) and
        (sysctl_verify.stdout != 'unavailable')
      ignore_errors: true

    # ============ Containerd Installation ============
    - name: Download containerd with checksum verification
      ansible.builtin.get_url:
        url: "{{ containerd_url }}"
        dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        checksum: "sha256:{{ lookup('url', containerd_url_checksum).split()[0] }}"
        mode: '0644'
        timeout: 30
        validate_certs: true
        owner: root
        group: root
      register: containerd_download
      retries: 3
      delay: 10
      until: containerd_download is succeeded
      changed_when: containerd_download.changed

    - name: Extract Containerd archive to /usr/local
      ansible.builtin.unarchive:
        src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: true
        owner: root
        group: root
        mode: '0755'
        creates: "/usr/local/bin/containerd"
      register: containerd_extract
      changed_when: containerd_extract.changed

    - name: Verify containerd installation
      ansible.builtin.command: ls -l /usr/local/bin/
      register: ls_result
      changed_when: false
      ignore_errors: true

    - name: Debug extracted files
      ansible.builtin.debug:
        var: ls_result.stdout

    - name: Get Containerd version
      ansible.builtin.command:
        cmd: containerd --version
      register: containerd_version_output
      changed_when: false

    - name: Print Containerd version
      debug:
        msg: "Containerd installed: {{ containerd_version_output.stdout }}"
        
    # ============ Containerd Service Setup ============
    - name: Configure containerd systemd service
      ansible.builtin.copy:
        dest: /etc/systemd/system/containerd.service
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target dbus.service

          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd

          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5

          LimitNPROC=infinity
          LimitCORE=infinity

          TasksMax=infinity
          OOMScoreAdjust=-999

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'
      register: containerd_service
      changed_when: containerd_service.changed
      notify:
        - Reload systemd
        - Restart containerd

    # ============ Runc Installation ============
    - name: Install GPG for package verification
      ansible.builtin.package:
        name: gnupg
        state: present

    - name: Download runc binary
      ansible.builtin.get_url:
        url: "{{ runc_url }}"
        dest: "/tmp/runc.amd64"
        mode: '0755'
      register: download_runc

    - name: Download runc signature file
      ansible.builtin.get_url:
        url: "{{ runc_asc }}"
        dest: "/tmp/runc.amd64.asc"
        mode: '0644'
      when: download_runc.changed

    - name: Import PGP key for verification
      ansible.builtin.command: >
        gpg --keyserver hkps://keyserver.ubuntu.com
        --recv-keys {{ runc.pgp.key_id }}
      register: import_key
      changed_when: "'imported' in import_key.stdout or 'already' in import_key.stderr"

    - name: Verify key fingerprint matches expected
      ansible.builtin.command: >
        gpg --fingerprint {{ runc.pgp.key_id }}
      register: key_check
      changed_when: false
      failed_when: >
        runc.pgp.expected_fingerprint.replace(' ', '') not in key_check.stdout.replace(' ', '')

    - name: Verify runc binary signature
      ansible.builtin.command: >
        gpg --status-fd 1 --verify /tmp/runc.amd64.asc /tmp/runc.amd64
      register: sig_verify
      changed_when: false
      failed_when: >
        sig_verify.rc != 0 or
        'GOODSIG ' + runc.pgp.key_id not in sig_verify.stdout or
        'VALIDSIG ' + runc.pgp.expected_fingerprint.replace(" ", "") not in sig_verify.stdout

    - name: Install verified runc binary
      ansible.builtin.copy:
        src: "/tmp/runc.amd64"
        dest: "/usr/local/sbin/runc"
        owner: root
        group: root
        mode: '0755'
        remote_src: true
      when: sig_verify is succeeded

    # ============ CNI Plugins Installation ============
    - name: Download CNI plugins with checksum
      ansible.builtin.get_url:
        url: "{{ cni_plugins_url }}"
        dest: /tmp/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz
        checksum: "sha256:{{ lookup('url', cni_url_checksum).split()[0] }}"
        mode: '0644'
        timeout: 30
        validate_certs: true
        owner: root
        group: root
      register: cni_plugins_download
      retries: 3
      delay: 10

    - name: Create CNI binaries directory
      ansible.builtin.file:
        path: /opt/cni/bin
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Extract CNI plugins
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins-linux-amd64-v{{ cni_plugins_version }}.tgz"
        dest: "/opt/cni/bin"
        remote_src: true
        owner: root
        group: root
        mode: '0755'
        extra_opts:
          - --no-same-owner
        creates: "/opt/cni/bin/bridge"
      when: cni_plugins_download.changed

    # ============ Containerd Configuration ============
    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Generate default containerd config
      ansible.builtin.shell: |
        containerd config default | tee /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
      tags:
        - now

    - name: Enable SystemdCgroup in containerd config
      ansible.builtin.blockinfile:
        path: /etc/containerd/config.toml
        marker: "# {mark} ANSIBLE MANAGED - io.containerd.cri"
        insertafter: |
          ^\s*\[plugins.'io.containerd.cri.v1.runtime'.containerd.runtimes.runc.options\]
        block: |
            #
                        SystemdCgroup = true
            #
      register: config_toml_edited
      changed_when: config_toml_edited.changed
      notify: Restart containerd

    # ============ Kubernetes Repository Setup ============
    - name: Create GPG key directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Download Kubernetes GPG key
      ansible.builtin.shell: |
        curl -fsSL "https://pkgs.k8s.io/core:/stable:/v{{ kube_version_major }}/deb/Release.key" | \
        gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: key_download
      changed_when: key_download.changed

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_version_major }}/deb/ /"
        state: present
        filename: kubernetes.list
        update_cache: yes
      when: key_download.changed

    - name: Update package lists
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_update

    - name: Upgrade all system packages
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
      register: package_upgrades
      notify:
        - Reboot system if required
        - restart containerd

    - name: Check if system needs reboot
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: package_upgrades.changed

    - name: Install Kubernetes components
      ansible.builtin.apt:
        name:
          - "kubelet={{ kube_version }}-1.1"
          - "kubeadm={{ kube_version }}-1.1"
          - "kubectl={{ kube_version }}-1.1"
        state: present
        force_apt_get: yes
        allow_downgrade: no
      register: kube_pkgs_installed

    - name: Prevent automatic Kubernetes package updates
      ansible.builtin.command:
        cmd: apt-mark hold kubelet kubeadm kubectl
      when: kube_pkgs_installed.changed

  handlers:
    # ============ System Handlers ============
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true
      listen: "systemd reload"

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes
      listen: "restart containerd"

    - name: Ensure containerd is running
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: started
        masked: false
      register: containerd_service_state

    - name: Reboot if needed after updates
      ansible.builtin.reboot:
        msg: "Rebooting the server after updates"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 10
      when: package_upgrades.changed or reboot_required_file.stat.exists